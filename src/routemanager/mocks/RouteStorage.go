// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/JaneKetko/Buses/src/domain"
import mock "github.com/stretchr/testify/mock"

// RouteStorage is an autogenerated mock type for the RouteStorage type
type RouteStorage struct {
	mock.Mock
}

// AddRoute provides a mock function with given fields: ctx, route
func (_m *RouteStorage) AddRoute(ctx context.Context, route *domain.Route) (int, error) {
	ret := _m.Called(ctx, route)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Route) int); ok {
		r0 = rf(ctx, route)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Route) error); ok {
		r1 = rf(ctx, route)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRow provides a mock function with given fields: ctx, id
func (_m *RouteStorage) DeleteRow(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllData provides a mock function with given fields: ctx
func (_m *RouteStorage) GetAllData(ctx context.Context) ([]domain.Route, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Route
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Route); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentData provides a mock function with given fields: ctx
func (_m *RouteStorage) GetCurrentData(ctx context.Context) ([]domain.Route, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Route
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Route); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RouteByID provides a mock function with given fields: ctx, id
func (_m *RouteStorage) RouteByID(ctx context.Context, id int) (*domain.Route, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Route
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Route); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoutesByEndPoint provides a mock function with given fields: ctx, point
func (_m *RouteStorage) RoutesByEndPoint(ctx context.Context, point string) ([]domain.Route, error) {
	ret := _m.Called(ctx, point)

	var r0 []domain.Route
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Route); ok {
		r0 = rf(ctx, point)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Route)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, point)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakePlace provides a mock function with given fields: ctx, id
func (_m *RouteStorage) TakePlace(ctx context.Context, id int) (*domain.Ticket, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Ticket); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ticket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
